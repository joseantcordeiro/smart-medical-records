import { z } from 'zod/v4'

import {
	createAddressSchema,
	createAgeSchema,
	createAnnotationSchema,
	createAttachmentSchema,
	createCodeableConceptSchema,
	createCodingSchema,
	createContactDetailSchema,
	createContactPointSchema,
	createContributorSchema,
	createCountSchema,
	createDataRequirementSchema,
	createDistanceSchema,
	createDosageSchema,
	createDurationSchema,
	createElementSchema,
	createExpressionSchema,
	createExtensionSchema,
	createHumanNameSchema,
	createIdentifierSchema,
	createMetaSchema,
	createMoneySchema,
	createParameterDefinitionSchema,
	createPeriodSchema,
	createQuantitySchema,
	createRangeSchema,
	createRatioSchema,
	createReferenceSchema,
	createRelatedArtifactSchema,
	createSampledDataSchema,
	createSignatureSchema,
	createTimingSchema,
	createTriggerDefinitionSchema,
	createUsageContextSchema,
} from '../core/schema'
import * as primitives from '../primitives'
import { createResourceListSchema } from '../resourcelist/schema'
import { getCachedSchema, ZodNever } from '../schema-cache'
import * as types from './types'

/* Generated from FHIR JSON Schema */

export function createParametersSchema() {
	return getCachedSchema('Parameters', [], () => {
		const baseSchema: z.ZodType<types.Parameters> = z.strictObject({
			resourceType: z.literal('Parameters'),
			id: primitives.getIdSchema().optional(),
			meta: createMetaSchema().optional(),
			implicitRules: primitives.getUriSchema().optional(),
			_implicitRules: createElementSchema().optional(),
			language: primitives.getCodeSchema().optional(),
			_language: createElementSchema().optional(),
			parameter: z.array(createParametersParameterSchema()).optional(),
		})

		return baseSchema
	})
}

export function createParametersParameterSchema() {
	return getCachedSchema('ParametersParameter', [], () => {
		const baseSchema: z.ZodType<types.ParametersParameter> = z.strictObject({
			id: primitives.getStringSchema().optional(),
			extension: z.array(createExtensionSchema()).optional(),
			modifierExtension: z.array(createExtensionSchema()).optional(),
			name: primitives.getStringSchema(),
			_name: createElementSchema().optional(),
			valueBase64Binary: z.string().optional(),
			_valueBase64Binary: createElementSchema().optional(),
			valueBoolean: z.boolean().optional(),
			_valueBoolean: createElementSchema().optional(),
			valueCanonical: z.string().optional(),
			_valueCanonical: createElementSchema().optional(),
			valueCode: z.string().optional(),
			_valueCode: createElementSchema().optional(),
			valueDate: z.string().optional(),
			_valueDate: createElementSchema().optional(),
			valueDateTime: z.string().optional(),
			_valueDateTime: createElementSchema().optional(),
			valueDecimal: z.number().optional(),
			_valueDecimal: createElementSchema().optional(),
			valueId: z.string().optional(),
			_valueId: createElementSchema().optional(),
			valueInstant: z.string().optional(),
			_valueInstant: createElementSchema().optional(),
			valueInteger: z.number().optional(),
			_valueInteger: createElementSchema().optional(),
			valueMarkdown: z.string().optional(),
			_valueMarkdown: createElementSchema().optional(),
			valueOid: z.string().optional(),
			_valueOid: createElementSchema().optional(),
			valuePositiveInt: z.number().optional(),
			_valuePositiveInt: createElementSchema().optional(),
			valueString: z.string().optional(),
			_valueString: createElementSchema().optional(),
			valueTime: z.string().optional(),
			_valueTime: createElementSchema().optional(),
			valueUnsignedInt: z.number().optional(),
			_valueUnsignedInt: createElementSchema().optional(),
			valueUri: z.string().optional(),
			_valueUri: createElementSchema().optional(),
			valueUrl: z.string().optional(),
			_valueUrl: createElementSchema().optional(),
			valueUuid: z.string().optional(),
			_valueUuid: createElementSchema().optional(),
			valueAddress: createAddressSchema().optional(),
			valueAge: createAgeSchema().optional(),
			valueAnnotation: createAnnotationSchema().optional(),
			valueAttachment: createAttachmentSchema().optional(),
			valueCodeableConcept: createCodeableConceptSchema().optional(),
			valueCoding: createCodingSchema().optional(),
			valueContactPoint: createContactPointSchema().optional(),
			valueCount: createCountSchema().optional(),
			valueDistance: createDistanceSchema().optional(),
			valueDuration: createDurationSchema().optional(),
			valueHumanName: createHumanNameSchema().optional(),
			valueIdentifier: createIdentifierSchema().optional(),
			valueMoney: createMoneySchema().optional(),
			valuePeriod: createPeriodSchema().optional(),
			valueQuantity: createQuantitySchema().optional(),
			valueRange: createRangeSchema().optional(),
			valueRatio: createRatioSchema().optional(),
			valueReference: createReferenceSchema().optional(),
			valueSampledData: createSampledDataSchema().optional(),
			valueSignature: createSignatureSchema().optional(),
			valueTiming: createTimingSchema().optional(),
			valueContactDetail: createContactDetailSchema().optional(),
			valueContributor: createContributorSchema().optional(),
			valueDataRequirement: createDataRequirementSchema().optional(),
			valueExpression: createExpressionSchema().optional(),
			valueParameterDefinition: createParameterDefinitionSchema().optional(),
			valueRelatedArtifact: createRelatedArtifactSchema().optional(),
			valueTriggerDefinition: createTriggerDefinitionSchema().optional(),
			valueUsageContext: createUsageContextSchema().optional(),
			valueDosage: createDosageSchema().optional(),
			valueMeta: createMetaSchema().optional(),
			resource: createResourceListSchema().optional(),
			part: z.array(createParametersParameterSchema()).optional(),
		})

		return baseSchema
	})
}
