//import { env } from 'cloudflare:workers'
import createClient from 'openapi-fetch'

//import { auth } from '@repo/auth'

import type { Client, Middleware } from 'openapi-fetch'
import type { paths } from './r4.d' // generated by openapi-typescript

// @ts-ignore: Response is available in the Cloudflare Workers runtime
declare const Response: typeof globalThis.Response

const myMiddleware: Middleware = {
	async onRequest({ request, options }) {
		// TODO add authorization verification before call the api
		/**const session = await auth.api.getSession({
			query: {
				disableCookieCache: true,
			},
			headers: request.headers,
		})

		if (!session) {
			throw new Error('You need to login first')
		}*/
		// set "x-api-key" header
		//equest.headers.set('x-api-key', 'bar')
		return request
	},
	async onResponse({ request, response, options }) {
		const { body, ...resOptions } = response
		// change status of response
		return new Response(body, { ...resOptions, status: 200 })
	},
	async onError({ error }) {
		// wrap errors thrown by fetch
		return new Error('Oops, fetch failed', { cause: error })
	},
}

export const fhirClient = (baseUrl: string): Client<paths, `${string}/${string}`> => {
	const fhir: Client<paths, `${string}/${string}`> = createClient<paths>({
		baseUrl: baseUrl,
	})
	fhir.use(myMiddleware)
	return fhir
}

const fhir: Client<paths, `${string}/${string}`> = createClient<paths>({
	baseUrl: 'http://joseantcordeiro.hopto.org:8080/fhir/',
})
fhir.use(myMiddleware)

//const fhir = client.use(myMiddleware)
export { fhir }
