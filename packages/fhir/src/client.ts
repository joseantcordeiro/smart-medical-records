//import { env } from 'cloudflare:workers'
import createClient from 'openapi-fetch'

import type { Client, Middleware } from 'openapi-fetch'
import type { paths } from './r4' // generated by openapi-typescript

// @ts-ignore: Response is available in the Cloudflare Workers runtime
declare const Response: typeof globalThis.Response

const myMiddleware: Middleware = {
	async onRequest({ request, options }) {
		// set "x-api-key" header
		//equest.headers.set('x-api-key', 'bar')
		return request
	},
	async onResponse({ request, response, options }) {
		const { body, ...resOptions } = response
		// change status of response
		return new Response(body, { ...resOptions, status: 200 })
	},
	async onError({ error }) {
		// wrap errors thrown by fetch
		return new Error('Oops, fetch failed', { cause: error })
	},
}

const fhir: Client<paths, `${string}/${string}`> = createClient<paths>({
	baseUrl: 'http://joseantcordeiro.hopto.org:8080/fhir/',
})
fhir.use(myMiddleware)

//const fhir = client.use(myMiddleware)
export { fhir }
