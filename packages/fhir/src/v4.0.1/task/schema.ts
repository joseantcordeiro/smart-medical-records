import { z } from "zod/v4";
import * as types from "./types";
import * as primitives from "../primitives";
import { getCachedSchema, ZodNever } from "../schema-cache";
import {
  createMetaSchema,
  createElementSchema,
  createExtensionSchema,
  createIdentifierSchema,
  createReferenceSchema,
  createCodeableConceptSchema,
  createPeriodSchema,
  createAnnotationSchema,
  createAddressSchema,
  createAgeSchema,
  createAttachmentSchema,
  createCodingSchema,
  createContactPointSchema,
  createCountSchema,
  createDistanceSchema,
  createDurationSchema,
  createHumanNameSchema,
  createMoneySchema,
  createQuantitySchema,
  createRangeSchema,
  createRatioSchema,
  createSampledDataSchema,
  createSignatureSchema,
  createTimingSchema,
  createContactDetailSchema,
  createContributorSchema,
  createDataRequirementSchema,
  createExpressionSchema,
  createParameterDefinitionSchema,
  createRelatedArtifactSchema,
  createTriggerDefinitionSchema,
  createUsageContextSchema,
  createDosageSchema,
} from "../core/schema";
import { createNarrativeSchema } from "../narrative/schema";
import { createResourceListSchema } from "../resourcelist/schema";

/* Generated from FHIR JSON Schema */

export function createTaskSchema<
  C extends z.ZodTypeAny = z.ZodUnknown,
>(options?: { contained?: C; allowContained?: boolean }) {
  const contained =
    options?.allowContained === false
      ? ZodNever
      : (options?.contained ?? createResourceListSchema());

  return getCachedSchema("Task", [contained], () => {
    const baseSchema: z.ZodType<types.Task<z.infer<C>>> = z.strictObject({
      resourceType: z.literal("Task"),
      id: primitives.getIdSchema().optional(),
      meta: createMetaSchema().optional(),
      implicitRules: primitives.getUriSchema().optional(),
      _implicitRules: createElementSchema().optional(),
      language: primitives.getCodeSchema().optional(),
      _language: createElementSchema().optional(),
      text: createNarrativeSchema().optional(),
      contained: z.array(contained).optional(),
      extension: z.array(createExtensionSchema()).optional(),
      modifierExtension: z.array(createExtensionSchema()).optional(),
      identifier: z.array(createIdentifierSchema()).optional(),
      instantiatesCanonical: primitives.getCanonicalSchema().optional(),
      instantiatesUri: primitives.getUriSchema().optional(),
      _instantiatesUri: createElementSchema().optional(),
      basedOn: z.array(createReferenceSchema()).optional(),
      groupIdentifier: createIdentifierSchema().optional(),
      partOf: z.array(createReferenceSchema()).optional(),
      status: z.enum([
        "draft",
        "requested",
        "received",
        "accepted",
        "rejected",
        "ready",
        "cancelled",
        "in-progress",
        "on-hold",
        "failed",
        "completed",
        "entered-in-error",
      ]),
      _status: createElementSchema().optional(),
      statusReason: createCodeableConceptSchema().optional(),
      businessStatus: createCodeableConceptSchema().optional(),
      intent: z.enum([
        "unknown",
        "proposal",
        "plan",
        "order",
        "original-order",
        "reflex-order",
        "filler-order",
        "instance-order",
        "option",
      ]),
      _intent: createElementSchema().optional(),
      priority: primitives.getCodeSchema().optional(),
      _priority: createElementSchema().optional(),
      code: createCodeableConceptSchema().optional(),
      description: primitives.getStringSchema().optional(),
      _description: createElementSchema().optional(),
      focus: createReferenceSchema().optional(),
      for: createReferenceSchema().optional(),
      encounter: createReferenceSchema().optional(),
      executionPeriod: createPeriodSchema().optional(),
      authoredOn: primitives.getDateTimeSchema().optional(),
      _authoredOn: createElementSchema().optional(),
      lastModified: primitives.getDateTimeSchema().optional(),
      _lastModified: createElementSchema().optional(),
      requester: createReferenceSchema().optional(),
      performerType: z.array(createCodeableConceptSchema()).optional(),
      owner: createReferenceSchema().optional(),
      location: createReferenceSchema().optional(),
      reasonCode: createCodeableConceptSchema().optional(),
      reasonReference: createReferenceSchema().optional(),
      insurance: z.array(createReferenceSchema()).optional(),
      note: z.array(createAnnotationSchema()).optional(),
      relevantHistory: z.array(createReferenceSchema()).optional(),
      restriction: createTaskRestrictionSchema().optional(),
      input: z.array(createTaskInputSchema()).optional(),
      output: z.array(createTaskOutputSchema()).optional(),
    });

    return baseSchema;
  });
}

export function createTaskRestrictionSchema() {
  return getCachedSchema("TaskRestriction", [], () => {
    const baseSchema: z.ZodType<types.TaskRestriction> = z.strictObject({
      id: primitives.getStringSchema().optional(),
      extension: z.array(createExtensionSchema()).optional(),
      modifierExtension: z.array(createExtensionSchema()).optional(),
      repetitions: primitives.getPositiveIntSchema().optional(),
      _repetitions: createElementSchema().optional(),
      period: createPeriodSchema().optional(),
      recipient: z.array(createReferenceSchema()).optional(),
    });

    return baseSchema;
  });
}

export function createTaskInputSchema() {
  return getCachedSchema("TaskInput", [], () => {
    const baseSchema: z.ZodType<types.TaskInput> = z.strictObject({
      id: primitives.getStringSchema().optional(),
      extension: z.array(createExtensionSchema()).optional(),
      modifierExtension: z.array(createExtensionSchema()).optional(),
      type: createCodeableConceptSchema(),
      valueBase64Binary: z.string().optional(),
      _valueBase64Binary: createElementSchema().optional(),
      valueBoolean: z.boolean().optional(),
      _valueBoolean: createElementSchema().optional(),
      valueCanonical: z.string().optional(),
      _valueCanonical: createElementSchema().optional(),
      valueCode: z.string().optional(),
      _valueCode: createElementSchema().optional(),
      valueDate: z.string().optional(),
      _valueDate: createElementSchema().optional(),
      valueDateTime: z.string().optional(),
      _valueDateTime: createElementSchema().optional(),
      valueDecimal: z.number().optional(),
      _valueDecimal: createElementSchema().optional(),
      valueId: z.string().optional(),
      _valueId: createElementSchema().optional(),
      valueInstant: z.string().optional(),
      _valueInstant: createElementSchema().optional(),
      valueInteger: z.number().optional(),
      _valueInteger: createElementSchema().optional(),
      valueMarkdown: z.string().optional(),
      _valueMarkdown: createElementSchema().optional(),
      valueOid: z.string().optional(),
      _valueOid: createElementSchema().optional(),
      valuePositiveInt: z.number().optional(),
      _valuePositiveInt: createElementSchema().optional(),
      valueString: z.string().optional(),
      _valueString: createElementSchema().optional(),
      valueTime: z.string().optional(),
      _valueTime: createElementSchema().optional(),
      valueUnsignedInt: z.number().optional(),
      _valueUnsignedInt: createElementSchema().optional(),
      valueUri: z.string().optional(),
      _valueUri: createElementSchema().optional(),
      valueUrl: z.string().optional(),
      _valueUrl: createElementSchema().optional(),
      valueUuid: z.string().optional(),
      _valueUuid: createElementSchema().optional(),
      valueAddress: createAddressSchema().optional(),
      valueAge: createAgeSchema().optional(),
      valueAnnotation: createAnnotationSchema().optional(),
      valueAttachment: createAttachmentSchema().optional(),
      valueCodeableConcept: createCodeableConceptSchema().optional(),
      valueCoding: createCodingSchema().optional(),
      valueContactPoint: createContactPointSchema().optional(),
      valueCount: createCountSchema().optional(),
      valueDistance: createDistanceSchema().optional(),
      valueDuration: createDurationSchema().optional(),
      valueHumanName: createHumanNameSchema().optional(),
      valueIdentifier: createIdentifierSchema().optional(),
      valueMoney: createMoneySchema().optional(),
      valuePeriod: createPeriodSchema().optional(),
      valueQuantity: createQuantitySchema().optional(),
      valueRange: createRangeSchema().optional(),
      valueRatio: createRatioSchema().optional(),
      valueReference: createReferenceSchema().optional(),
      valueSampledData: createSampledDataSchema().optional(),
      valueSignature: createSignatureSchema().optional(),
      valueTiming: createTimingSchema().optional(),
      valueContactDetail: createContactDetailSchema().optional(),
      valueContributor: createContributorSchema().optional(),
      valueDataRequirement: createDataRequirementSchema().optional(),
      valueExpression: createExpressionSchema().optional(),
      valueParameterDefinition: createParameterDefinitionSchema().optional(),
      valueRelatedArtifact: createRelatedArtifactSchema().optional(),
      valueTriggerDefinition: createTriggerDefinitionSchema().optional(),
      valueUsageContext: createUsageContextSchema().optional(),
      valueDosage: createDosageSchema().optional(),
      valueMeta: createMetaSchema().optional(),
    });

    return baseSchema;
  });
}

export function createTaskOutputSchema() {
  return getCachedSchema("TaskOutput", [], () => {
    const baseSchema: z.ZodType<types.TaskOutput> = z.strictObject({
      id: primitives.getStringSchema().optional(),
      extension: z.array(createExtensionSchema()).optional(),
      modifierExtension: z.array(createExtensionSchema()).optional(),
      type: createCodeableConceptSchema(),
      valueBase64Binary: z.string().optional(),
      _valueBase64Binary: createElementSchema().optional(),
      valueBoolean: z.boolean().optional(),
      _valueBoolean: createElementSchema().optional(),
      valueCanonical: z.string().optional(),
      _valueCanonical: createElementSchema().optional(),
      valueCode: z.string().optional(),
      _valueCode: createElementSchema().optional(),
      valueDate: z.string().optional(),
      _valueDate: createElementSchema().optional(),
      valueDateTime: z.string().optional(),
      _valueDateTime: createElementSchema().optional(),
      valueDecimal: z.number().optional(),
      _valueDecimal: createElementSchema().optional(),
      valueId: z.string().optional(),
      _valueId: createElementSchema().optional(),
      valueInstant: z.string().optional(),
      _valueInstant: createElementSchema().optional(),
      valueInteger: z.number().optional(),
      _valueInteger: createElementSchema().optional(),
      valueMarkdown: z.string().optional(),
      _valueMarkdown: createElementSchema().optional(),
      valueOid: z.string().optional(),
      _valueOid: createElementSchema().optional(),
      valuePositiveInt: z.number().optional(),
      _valuePositiveInt: createElementSchema().optional(),
      valueString: z.string().optional(),
      _valueString: createElementSchema().optional(),
      valueTime: z.string().optional(),
      _valueTime: createElementSchema().optional(),
      valueUnsignedInt: z.number().optional(),
      _valueUnsignedInt: createElementSchema().optional(),
      valueUri: z.string().optional(),
      _valueUri: createElementSchema().optional(),
      valueUrl: z.string().optional(),
      _valueUrl: createElementSchema().optional(),
      valueUuid: z.string().optional(),
      _valueUuid: createElementSchema().optional(),
      valueAddress: createAddressSchema().optional(),
      valueAge: createAgeSchema().optional(),
      valueAnnotation: createAnnotationSchema().optional(),
      valueAttachment: createAttachmentSchema().optional(),
      valueCodeableConcept: createCodeableConceptSchema().optional(),
      valueCoding: createCodingSchema().optional(),
      valueContactPoint: createContactPointSchema().optional(),
      valueCount: createCountSchema().optional(),
      valueDistance: createDistanceSchema().optional(),
      valueDuration: createDurationSchema().optional(),
      valueHumanName: createHumanNameSchema().optional(),
      valueIdentifier: createIdentifierSchema().optional(),
      valueMoney: createMoneySchema().optional(),
      valuePeriod: createPeriodSchema().optional(),
      valueQuantity: createQuantitySchema().optional(),
      valueRange: createRangeSchema().optional(),
      valueRatio: createRatioSchema().optional(),
      valueReference: createReferenceSchema().optional(),
      valueSampledData: createSampledDataSchema().optional(),
      valueSignature: createSignatureSchema().optional(),
      valueTiming: createTimingSchema().optional(),
      valueContactDetail: createContactDetailSchema().optional(),
      valueContributor: createContributorSchema().optional(),
      valueDataRequirement: createDataRequirementSchema().optional(),
      valueExpression: createExpressionSchema().optional(),
      valueParameterDefinition: createParameterDefinitionSchema().optional(),
      valueRelatedArtifact: createRelatedArtifactSchema().optional(),
      valueTriggerDefinition: createTriggerDefinitionSchema().optional(),
      valueUsageContext: createUsageContextSchema().optional(),
      valueDosage: createDosageSchema().optional(),
      valueMeta: createMetaSchema().optional(),
    });

    return baseSchema;
  });
}
