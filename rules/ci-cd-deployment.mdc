---
description:
globs:
alwaysApply: false
---

# CI/CD and Deployment

This guide covers the continuous integration, deployment, and release processes for the Node.js monorepo.

## GitHub Actions Workflows

### Branch Workflow - `.github/workflows/branches.yml`

**Trigger**: Pushes to any branch except `main`

**Pipeline**:

1. Install dependencies with pnpm
2. Run CI checks (`pnpm check:ci`)
   - Dependency version checks
   - Code formatting validation
   - TypeScript type checking
   - ESLint linting
3. Run tests (`pnpm test:ci`)
   - Unit tests across all packages
    - Integration tests for applications/services

### Release Workflow - `.github/workflows/release.yml`

**Trigger**: Pushes to `main` branch

**Jobs**:

#### 1. Test and Deploy

- Install dependencies
- Run full CI checks
- Run test suite
- **Deploy all applications/services** (`pnpm turbo deploy` or project-specific deployment script)
- Requires secrets: `NPM_TOKEN` (for package publishing, if any), and any environment-specific secrets for deployment (e.g., `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `DOCKER_HUB_TOKEN`, etc.)

#### 2. Create Release PR

- Uses [Changesets](mdc:https:/github.com/changesets/changesets)
- Creates PR with version bumps and changelog
- Automatically merges when ready

## Deployment Requirements

### Deployment Secrets

Configure necessary secrets in GitHub repository settings. Examples include:

```bash
# For publishing packages to npm (if applicable)
NPM_TOKEN=your_npm_token

# For deploying to AWS (if applicable)
AWS_ACCESS_KEY_ID=your_aws_access_key_id
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key

# For deploying to Docker Hub (if applicable)
DOCKER_HUB_USERNAME=your_docker_username
DOCKER_HUB_TOKEN=your_docker_hub_token

# Add other platform-specific secrets as needed
# AZURE_CREDENTIALS=your_azure_credentials
# GCP_SA_KEY=your_gcp_service_account_key
```

### Application Configuration

Each Node.js application/service might have its own configuration file (e.g., `config.json`, `.env` files, or environment-specific config files). Key aspects to configure typically include:

- **Port**: The port the application will listen on.
- **Database connections**: Connection strings and credentials.
- **External service URLs**: Endpoints for other services.
- **Logging levels**: Verbosity of logs.
- **Environment-specific settings**: Such as `NODE_ENV` (development, staging, production).

Example (`config/default.json` or environment variables):
```json
{
  "server": {
    "port": 3000
  },
  "database": {
    "url": "mongodb://localhost:27017/mydatabase"
  },
  "logging": {
    "level": "info"
  },
  "ENVIRONMENT": "development" // Often set via process.env.NODE_ENV
}
```
Ensure that sensitive information is not hardcoded but managed through environment variables or a secure secret management system.

## Local Development and Deployment

### Running a Single Application/Service Locally

```bash
# Start a specific application in development mode
pnpm turbo -F app-name dev

# Or, if deployment involves a build step followed by running the built output:
pnpm turbo -F app-name build
node apps/app-name/dist/index.js # Or your specific start command
```

### Deploying a Single Application/Service

Deployment commands will vary based on your chosen hosting platform and tools (e.g., Docker, PM2, serverless framework, custom scripts).

```bash
# Example: Deploy specific application (replace with actual command)
pnpm turbo -F app-name deploy

# Example: Deploy to a specific environment
pnpm turbo -F app-name deploy -- --env production
```

### Deploying All Applications/Services

```bash
# Deploy all applications (replace with actual command if pnpm turbo deploy is not used)
just deploy
# or
pnpm turbo deploy
```

### Environment Variables

- **Local Development**: Use `.env` files at the root of each application or a centralized configuration management tool.
- **Staging/Production**: Configure environment variables directly in your hosting provider's dashboard, through CI/CD pipeline variables, or using a secret management service.

## Turborepo Deployment Pipeline

### Build Dependencies

[turbo.json](mdc:turbo.json) defines deployment pipeline:

```json
{
	"deploy": {
		"cache": false,
		"dependsOn": ["build", "topo"],
		"env": [
			"NODE_ENV",
			// Add any other environment variables that affect the build/deployment process
			// e.g., "DATABASE_URL_STAGING", "API_KEY_PRODUCTION"
		],
		// "outputs" can be configured if your deployment process creates specific artifacts
		// "outputs": ["dist/**", "docker-image.tar"]
	}
}
```

**Flow**:

1. Build shared packages (`^build`).
2. Build application(s).
3. Generate deployment artifacts (e.g., Docker images, serverless function packages, compiled code).
4. Deploy to the target Node.js environment (e.g., a PaaS, Kubernetes, VMs).

### Caching Strategy

- **Build artifacts** are cached by Turborepo
- **Deployment** is never cached (`"cache": false`)
- **Environment variables** invalidate relevant caches

## Changesets for Versioning

### Creating Changesets

```bash
# Interactive changeset creation
just cs
# or
pnpm changeset

# Describe changes for each package
```

### Changeset Types

- **patch** - Bug fixes, small updates
- **minor** - New features, non-breaking changes
- **major** - Breaking changes

### Release Process

1. Create changesets for changes
2. Merge to `main` branch
3. GitHub Actions creates release PR
4. Review and merge release PR
5. Packages are automatically published

## Package Publishing

### Workspace Dependencies

[packages/workspace-dependencies/](mdc:packages/workspace-dependencies) manages:

- Version consistency across packages
- Shared dependency declarations
- Build tool coordination

### Publishing Scope

Currently focused on internal packages:

- `@repo/eslint-config`
- `@repo/typescript-config`
- `@repo/hono-helpers`
- `@repo/tools`

## Deployment Best Practices

1. **Environment Separation**: Use distinct configurations (e.g., environment variables, configuration files) for `development`, `staging`, and `production` environments. Consider using different deployment targets or namespaces.
2. **Secret Management**: Never commit secrets to version control. Utilize GitHub Actions secrets for CI/CD and a secure secret management solution for your runtime environments (e.g., HashiCorp Vault, AWS Secrets Manager, environment variables injected by the platform).
3. **Atomic Deployments**: If deploying multiple interdependent services, aim for atomic or coordinated deployments to minimize downtime and ensure consistency. Tools like `pnpm turbo deploy` can help if your deployment scripts are set up appropriately.
4. **Comprehensive Testing**: Ensure unit, integration, and potentially end-to-end tests pass before any deployment. Automate this in your CI pipeline.
5. **Rollback Strategy**: Have a well-defined rollback plan. This might involve redeploying a previous stable version/tag, or using blue/green or canary deployment strategies.
6. **Monitoring and Logging**: Implement robust logging and monitoring for your deployed applications. Use tools to track performance, errors, and system health.
7. **Infrastructure as Code (IaC)**: If applicable, manage your deployment infrastructure (servers, databases, load balancers) using IaC tools like Terraform or CloudFormation for reproducibility and version control.
8. **Dependency Management**: Keep dependencies up to date and regularly scan for vulnerabilities.

## Troubleshooting Deployment

### Common Issues

```bash
# Clear Turborepo cache (useful if you suspect stale build artifacts)
pnpm turbo clean

# Rebuild all packages forcefully
pnpm turbo build --force

# Check application logs (specific commands depend on your logging setup and platform)
# Example: View logs for a PM2 managed app
pm2 logs app-name

# Example: View logs for a Docker container
docker logs <container_id_or_name>
```

### Debugging Deployment Issues

- **Check CI/CD Logs**: Detailed logs from your GitHub Actions workflows can often pinpoint where a deployment failed.
- **Validate Configurations**: Ensure all environment variables, configuration files, and service discovery mechanisms are correctly set for the target environment.
- **Connectivity**: Verify network connectivity between services, databases, and other dependencies.
- **Resource Limits**: Ensure your deployment environment has sufficient CPU, memory, and disk space.
- **Permissions**: Check that the deployment process and runtime application have the necessary permissions to access resources.
- **Local Reproduction**: If possible, try to reproduce the issue in a local environment that closely mimics production.
- **Incremental Deployment**: If deploying a large change, consider breaking it down and deploying incrementally to isolate potential issues.
